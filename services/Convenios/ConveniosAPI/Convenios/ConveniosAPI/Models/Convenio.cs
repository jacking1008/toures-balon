/*
 * Convenios API
 *
 * Este es el API de Convenios para Toures Balon
 *
 * OpenAPI spec version: 1.0.0
 * Contact: touresbalon@archetype.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations.Schema;

namespace Javeriana.Convenios.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    [Table("Convenio")]
    public class Convenio : IEquatable<Convenio>
    { 
        /// <summary>
        /// Nombre del proveedor de servicios.
        /// </summary>
        /// <value>Nombre del proveedor de servicios.</value>
        //[DataMember(Name="nombreProveedor")]
        public string NombreProveedor { get; set; }

        /// <summary>
        /// Identificación del proveedor de servicios.
        /// </summary>
        /// <value>Identificación del proveedor de servicios.</value>
        //[DataMember(Name="identificacion")]
        [Required(ErrorMessage = "La identificación de la entidad es obligatoria")]
        [Key]
        public string Identificacion { get; set; }

        /// <summary>
        /// Tipo de convenio.
        /// </summary>
        /// <value>Tipo de convenio.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TipoConvenioEnum
        {
            /// <summary>
            /// Enum TRANSPORTEEnum for TRANSPORTE
            /// </summary>
            [EnumMember(Value = "TRANSPORTE")]
            TRANSPORTEEnum = 0,
            /// <summary>
            /// Enum HOSPEDAJEEnum for HOSPEDAJE
            /// </summary>
            [EnumMember(Value = "HOSPEDAJE")]
            HOSPEDAJEEnum = 1,
            /// <summary>
            /// Enum EVENTOEnum for EVENTO
            /// </summary>
            [EnumMember(Value = "EVENTO")]
            EVENTOEnum = 2        }

        /// <summary>
        /// Tipo de convenio.
        /// </summary>
        /// <value>Tipo de convenio.</value>
        //[DataMember(Name="tipoConvenio")]
        public TipoConvenioEnum? TipoConvenio { get; set; }

        /// <summary>
        /// Vigencia del convenio.
        /// </summary>
        /// <value>Vigencia del convenio.</value>
        //[DataMember(Name="fechaVigencia")]
        public DateTime? FechaVigencia { get; set; }

        /// <summary>
        /// Correo de contacto del convenio.
        /// </summary>
        /// <value>Correo de contacto del convenio.</value>
        //[DataMember(Name="correo")]
        public string Correo { get; set; }

        /// <summary>
        /// Gets or Sets Pais
        /// </summary>
        //[DataMember(Name="pais")]
        [ForeignKey("FK_Convenio_Pais_PaisCodigo")]
        public Pais Pais { get; set; }

        /// <summary>
        /// Gets or Sets Ciudad
        /// </summary>
        //[DataMember(Name="ciudad")]
        [ForeignKey("FK_Convenio_Ciudad_CiudadCodigo")]
        public Ciudad Ciudad { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Convenio {\n");
            sb.Append("  NombreProveedor: ").Append(NombreProveedor).Append("\n");
            sb.Append("  Identificacion: ").Append(Identificacion).Append("\n");
            sb.Append("  TipoConvenio: ").Append(TipoConvenio).Append("\n");
            sb.Append("  FechaVigencia: ").Append(FechaVigencia).Append("\n");
            sb.Append("  Correo: ").Append(Correo).Append("\n");
            sb.Append("  Pais: ").Append(Pais).Append("\n");
            sb.Append("  Ciudad: ").Append(Ciudad).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Convenio)obj);
        }

        /// <summary>
        /// Returns true if Convenio instances are equal
        /// </summary>
        /// <param name="other">Instance of Convenio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Convenio other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NombreProveedor == other.NombreProveedor ||
                    NombreProveedor != null &&
                    NombreProveedor.Equals(other.NombreProveedor)
                ) && 
                (
                    Identificacion == other.Identificacion ||
                    Identificacion != null &&
                    Identificacion.Equals(other.Identificacion)
                ) && 
                (
                    TipoConvenio == other.TipoConvenio ||
                    TipoConvenio != null &&
                    TipoConvenio.Equals(other.TipoConvenio)
                ) && 
                (
                    FechaVigencia == other.FechaVigencia ||
                    FechaVigencia != null &&
                    FechaVigencia.Equals(other.FechaVigencia)
                ) && 
                (
                    Correo == other.Correo ||
                    Correo != null &&
                    Correo.Equals(other.Correo)
                ) && 
                (
                    Pais == other.Pais ||
                    Pais != null &&
                    Pais.Equals(other.Pais)
                ) && 
                (
                    Ciudad == other.Ciudad ||
                    Ciudad != null &&
                    Ciudad.Equals(other.Ciudad)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NombreProveedor != null)
                    hashCode = hashCode * 59 + NombreProveedor.GetHashCode();
                    if (Identificacion != null)
                    hashCode = hashCode * 59 + Identificacion.GetHashCode();
                    if (TipoConvenio != null)
                    hashCode = hashCode * 59 + TipoConvenio.GetHashCode();
                    if (FechaVigencia != null)
                    hashCode = hashCode * 59 + FechaVigencia.GetHashCode();
                    if (Correo != null)
                    hashCode = hashCode * 59 + Correo.GetHashCode();
                    if (Pais != null)
                    hashCode = hashCode * 59 + Pais.GetHashCode();
                    if (Ciudad != null)
                    hashCode = hashCode * 59 + Ciudad.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Convenio left, Convenio right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Convenio left, Convenio right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
