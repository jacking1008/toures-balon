/*
 * Convenios API
 *
 * Este es el API de Convenios para Toures Balon
 *
 * OpenAPI spec version: 1.0.0
 * Contact: touresbalon@archetype.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations.Schema;

namespace Javeriana.Convenios.Api.Models
{ 
    /// <summary>
    /// País
    /// </summary>
    [Table("Pais")]
    public partial class Pais : IEquatable<Pais>
    {
        /// <summary>
        /// Código del país.
        /// </summary>
        /// <value>Código del país.</value>
        [Required(ErrorMessage = "El código del país es obligatorio")]
        [Key]
        public int Codigo { get; set; }

        /// <summary>
        /// Nombre del país.
        /// </summary>
        /// <value>Nombre del país.</value>
        //[DataMember(Name="nombre")]
        public string Nombre { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pais {\n");
            sb.Append("  Codigo: ").Append(Codigo).Append("\n");
            sb.Append("  Nombre: ").Append(Nombre).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Pais)obj);
        }

        /// <summary>
        /// Returns true if Pais instances are equal
        /// </summary>
        /// <param name="other">Instance of Pais to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pais other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Codigo == other.Codigo ||
                    Codigo.Equals(other.Codigo)
                ) && 
                (
                    Nombre == other.Nombre ||
                    Nombre != null &&
                    Nombre.Equals(other.Nombre)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Nombre != null)
                    hashCode = hashCode * 59 + Nombre.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Pais left, Pais right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Pais left, Pais right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
