/*
 * Convenios API
 *
 * Este es el API de Convenios para Toures Balon
 *
 * OpenAPI spec version: 1.0.0
 * Contact: touresbalon@archetype.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Javeriana.Convenios.Api.Models;
using Javeriana.Convenios.Api.Services;
using Javeriana.Convenios.Api.Interfaces;
using Microsoft.AspNetCore.Server.IIS.Core;
using Javeriana.Convenios.Api.Exceptions;
using Microsoft.AspNetCore.Http;
using System.Linq;

namespace Javeriana.Convenios.Api.Controllers
{ 
    /// <summary>
    /// Controlador del API de convenios.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class ConveniosController : ControllerBase
    {
        //private IConvenioService _service;
        private IRepositoryWrapper _repository;

        public ConveniosController(IRepositoryWrapper repository) {
            //_service = conveniosService;
            //_context = context;
            _repository = repository;
        }

        /// <summary>
        /// Consulta la información de los convenios basado en parámetros de búsqueda
        /// </summary>
        /// <remarks>Consulta la información de los convenios basado en parámetros de búsqueda </remarks>
        /// <param name="limit">El número de convenios a retornar</param>
        /// <param name="nombre">Nombre para consultar convenios</param>
        /// <param name="estado">Estado del convenio.</param>
        /// <response code="200">Consulta exitosa</response>
        /// <response code="400">Parametro invalido</response>
        /// <response code="401">No autorizado</response>
        /// <response code="500">Error del sistema</response>
        [HttpGet]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status409Conflict)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        //[SwaggerResponse(statusCode: 200, type: typeof(ConveniosGETAllRs), description: "Consulta exitosa")]
        public virtual IActionResult ConveniosGETAll([FromQuery]int? limit, [FromQuery]int? nombre, [FromQuery]string estado)
        {
            try {
                //var conveniosGETAllRs = _service.ConveniosGETAll();
                var convenios = _repository.Convenio.GetAllConvenios();

                if (convenios.Count() != 0)
                    return Ok(convenios);
                else
                    return Conflict();
            } catch (ConvenioNoExisteException e) {
                return StatusCode(500, e.Message);
            }
        }

        /// <summary>
        /// Consulta al información de un convenio por su id
        /// </summary>
        /// <remarks>Consulta al información de un convenio por su id </remarks>
        /// <param name="identificacion">Identificación del convenio</param>
        /// <response code="200">Consulta exitosa</response>
        /// <response code="400">Parametro invalido</response>
        /// <response code="404">No encontrado</response>
        /// <response code="401">No autorizado</response>
        /// <response code="500">Error del sistema</response>
        [HttpGet("{identificacion}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status409Conflict)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        //[SwaggerResponse(statusCode: 200, type: typeof(ConveniosGETByIdRs), description: "Consulta exitosa")]
        public virtual IActionResult ConveniosGETById([FromRoute][Required]string identificacion)
        {
            try {
                var conveniosGETByIdRs = _repository.Convenio.GetConvenioById(identificacion);
                if (conveniosGETByIdRs == null)
                    return NotFound();
                if (conveniosGETByIdRs != null)
                    return Ok(conveniosGETByIdRs);
                else
                    return StatusCode(500);
            } catch (ConvenioNoExisteException e) {
                return Conflict(e.Message);
            }
        }

        /// <summary>
        /// Actualizar información del convenio
        /// </summary>
        /// <remarks>Actualiza el convenio de acuerdo con los parámetros recibidos.</remarks>
        /// <param name="identificacion">identificacion del convenio</param>
        /// <param name="body">Convenio a actualizar</param>
        /// <response code="201">Convenio actualizado exitosamente</response>
        /// <response code="400">Parametro Invalido</response>
        /// <response code="500">Error del sistema</response>
        [HttpPatch("{identificacion}")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status409Conflict)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        //[SwaggerResponse(statusCode: 201, type: typeof(ConveniosPCTRs), description: "Convenio actualizado exitosamente")]
        public virtual IActionResult ConveniosPCT([FromRoute][Required]string identificacion, [FromBody]ConveniosPCTRq body)
        {
            try {
                if (ModelState.IsValid) {
                    
                    var convenios = _repository.Convenio.UpdateConvenio(body.Convenio as Convenio);
                    if (convenios == null)
                        return NoContent();
                    else
                        return StatusCode(201, convenios);
                } else {
                    return BadRequest();
                }
            } catch (ConvenioNoExisteException e) {
                return NotFound(e.Message);
            } catch (ConvenioYaExisteException e) {
                return Conflict(e.Message);
            }
        }

        /// <summary>
        /// Registrar un nuevo convenio
        /// </summary>
        /// <remarks>Crea el convenio de acuerdo con los parámetros recibidos.</remarks>
        /// <param name="body">Convenio a registrar</param>
        /// <response code="201">Convenio registrado exitosamente</response>
        /// <response code="400">Parametro Invalido</response>
        /// <response code="409">Convenio ya existe</response>
        /// <response code="500">Error del sistema</response>
        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status409Conflict)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        //[SwaggerResponse(statusCode: 201, type: typeof(ConveniosPSTRs), description: "Convenio registrado exitosamente")]
        public virtual IActionResult ConveniosPST([FromBody]ConveniosPSTRq body)
        {
            try {
                if (ModelState.IsValid) {
                    _repository.Convenio.CreateConvenio(body.Convenio);
                    return StatusCode(201, body.Convenio);
                } else return BadRequest();
                
            }
             catch (ConvenioNoExisteException e) {
                return NotFound(e.Message);
            } catch (ConvenioYaExisteException e) {
                return Conflict(e.Message);
            }
        }

        /// <summary>
        /// Borrar el convenio por su identificacion
        /// </summary>
        /// <remarks>Borra el convenio de acuerdo a la identificacion recibida.</remarks>
        /// <param name="identificacion">identificacion del convenio</param>
        /// <response code="200">Convenio eliminado exitosamente</response>
        /// <response code="400">Parametro Invalido</response>
        /// <response code="500">Error del sistema</response>
        [HttpDelete("{identificacion}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public virtual IActionResult ConveniosDEL([FromRoute][Required]string identificacion) {
            try {
                _repository.Convenio.DeleteConvenio(new Convenio { Identificacion = identificacion });
                return Ok();
            }
            catch (ConvenioNoExisteException e) {
                var a = e.Message;
                return NotFound();
            }
            
        }
    }
}
